@use "sass:map";
@use "sass:meta";
@use "../foundations/foundations__breakpoints";
@use "../settings/settings__config";
@use "../settings/settings__core";

/* -------------------------------------------------------------------------
 * SASS-MQ
 *
 * Based on https://github.com/sass-mq/sass-mq
 */

// SASS-MQ variables
// --------------------------------------------------

$t-sass-mq__base-font-size: settings__core.$s-core__font-size !default;
$t-sass-mq__breakpoints: foundations__breakpoints.$f-breakpoints !default;
$t-sass-mq__breakpoints--portrait: foundations__breakpoints.$f-breakpoints--portrait !default;
$t-sass-mq__brekapoints--landscape: foundations__breakpoints.$f-breakpoints--landscape !default;
$t-sass-mq__media-type: all !default;

$t-sass-mq__debug: settings__config.$s-config__debug !default;
$t-sass-mq__debug--color: rgb(255, 0, 0) !default;
$t-sass-mq__debug--bg-color: rgba(255, 0, 0, 0.1) !default;
$t-sass-mq__debug--border-color: rgb(255, 0, 0) !default;

// SASS-MQ functions
// --------------------------------------------------

@function t-sass-mq__get-breakpoint-width($_bp-name, $_breakpoints: $t-sass-mq__breakpoints) {
  @if map.has-key($_breakpoints, $_bp-name) {
    @return map.get($_breakpoints, $_bp-name);
  }
  @else {
    @warn "Breakpoint #{$_bp-name} wasn't found in $_breakpoints.";
  }
}

@function t-sass-mq__get-breakpoint-orientation($_bp-name) {
  @if map.has-key($t-sass-mq__breakpoints--portrait, $_bp-name) {
    @return "(orientation: landscape)";
  }
  @else {
    @return "(orientation: portrait)";
  }
}

// SASS-MQ main mixin
// --------------------------------------------------

@mixin t-mq($from: false, $until: false, $and: false, $media-type: $t-sass-mq__media-type, $breakpoints: $t-sass-mq__breakpoints) {
  $min-width: 0;
  $max-width: 0;
  $media-query: $media-type;
  $orientation: false;

  // From: this breakpoint (inclusive)

  @if $from {
    @if meta.type-of($from) == number {
      $min-width: $from;
    }
    @else {
      $orientation: t-sass-mq__get-breakpoint-orientation($from);
      $min-width: t-sass-mq__get-breakpoint-width($from, $breakpoints);
    }
  }

  // Until: that breakpoint (exclusive)

  @if $until {
    @if meta.type-of($until) == number {
      $max-width: $until;
    }
    @else {
      $orientation: t-sass-mq__get-breakpoint-orientation($until);
      $max-width: t-sass-mq__get-breakpoint-width($until, $breakpoints) - 1px;
    }
  }

  // Query building

  @if $min-width != 0 {
    $media-query: "#{$media-query} and (min-width: #{$min-width})";
  }

  @if $max-width != 0 {
    $media-query: "#{$media-query} and (max-width: #{$max-width})";
  }

  @if $and {
    $media-query: "#{$media-query} and #{$and}";
  }

  @if $orientation {
    $media-query: "#{$media-query} and #{$orientation}";
  }

  @media #{$media-query} {
    @content;
  }
}

// SASS-MQ debug mixin
// --------------------------------------------------

@mixin t-sass-mq__debug($_breakpoints: $t-sass-mq__breakpoints) {
  body::before {
    background-color: $t-sass-mq__debug--bg-color;
    border-bottom: 1px solid $t-sass-mq__debug--border-color;
    border-left: 1px solid $t-sass-mq__debug--border-color;
    color: $t-sass-mq__debug--color;
    font: small-caption;
    padding: 3px 6px;
    pointer-events: none;
    position: fixed;
    right: 0;
    top: 0;
    z-index: 100;

    // Loop through the breakpoints that should be shown
    @each $_bp-name, $_bp-value in $_breakpoints {
      @include t-mq($from: $_bp-name) {
        content: "#{$_bp-name} >= #{$_bp-value}";
      }
    }
  }
}

// SASS-MQ debug output
// --------------------------------------------------

@if $t-sass-mq__debug {
  @include t-sass-mq__debug;
}
