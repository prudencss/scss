@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "../elements/elements__document";
@use "../foundations/foundations__font-sizes";
@use "../settings/core-functions/map-diff";
@use "../settings/core-functions/px-to-rem";

/* -------------------------------------------------------------------------
 * BODY
 *
 * body known as a material not as a tag */

// Material variables
// --------------------------------------------------

// Material toggling

$m-body--enabled: true !default;

// Material default properties

$m-body__properties: (
  "font-family": elements__document.$e-document__body--font-family,
  "font-size": elements__document.$e-document__body--font-size,
  "line-height": elements__document.$e-document__body--line-height,
  "width": 100vw,
  "height": 100vh
) !default;

// Material Size Modifiers

$m-body__mod-sizes--enabled: true !default;
$m-body__mod-sizes: (
  "xs": (
    "font-family": elements__document.$e-document__body--font-family,
    "font-size": foundations__font-sizes.$f-font-size--xs,
    "line-height": elements__document.$e-document__body--line-height
  ),
  "s": (
    "font-family": elements__document.$e-document__body--font-family,
    "font-size": foundations__font-sizes.$f-font-size--s,
    "line-height": elements__document.$e-document__body--line-height
  ),
  "m": $m-body__properties,
  "l": (
    "font-family": elements__document.$e-document__body--font-family,
    "font-size": foundations__font-sizes.$f-font-size--l,
    "line-height": elements__document.$e-document__body--line-height
  ),
  "xl": (
    "font-family": elements__document.$e-document__body--font-family,
    "font-size": foundations__font-sizes.$f-font-size--xl,
    "line-height": elements__document.$e-document__body--line-height
  )
) !default;

// Material as a mixin
// --------------------------------------------------

@mixin m-body($_properties: $m-body__properties, $_default-properties: $m-body__properties) {
  // Try to resolve properties from a given string

  @if meta.type-of($_properties) == "string" {
    @if map.has-key($_properties, $m-body__mod-sizes) {
      $_properties: map.get($m-body__mod-sizes, $_properties);
    }
    @else {
      @error "m-body: `#{$_properties}` needs to be a map or a valid key for $m-body__mod-sizes";
    }
  }

  @each $_property, $_value in map.merge($_default-properties, $_properties) {
    @if meta.type_of($_value) == "number" and math.unit($_value) == "px" {
      $_value: px-to-rem.s-core-px-to-rem($_value);
    }

    #{$_property}: $_value;
  }
}

// Material selector output
// --------------------------------------------------

@if $m-body--enabled {
  .m-body {
    @include m-body($m-body__properties);
  }
}

// Material sizes modifiers output
// --------------------------------------------------

@if $m-body--enabled and $m-body__mod-sizes--enabled {
  @each $_mod-name, $_mod-properties in $m-body__mod-sizes {
    .m-body__size--#{$_mod-name} {
      @each $_property, $_value in map-diff.s-core-map-diff($m-body__properties, $_mod-properties) {
        @if meta.type_of($_value) == "number" and math.unit($_value) == "px" {
          $_value: px-to-rem.s-core-px-to-rem($_value);
        }

        #{$_property}: $_value;
      }
    }
  }
}
